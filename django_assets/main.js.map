{"version":3,"sources":["webpack://trick-track/./source/js/cell.js","webpack://trick-track/./source/js/util.js","webpack://trick-track/./source/js/matrix.js","webpack://trick-track/./source/js/playback-cells.js","webpack://trick-track/./source/js/slider.js","webpack://trick-track/./source/js/bpm.js","webpack://trick-track/./source/js/player.js","webpack://trick-track/./source/js/add.js","webpack://trick-track/./source/js/index.js","webpack://trick-track/./source/js/controls.js"],"names":["document","querySelector","sampleList","sampleTemplate","content","renderCell","cellElement","createElement","classList","add","type","createCellsArray","i","cb","slidesFirst","querySelectorAll","slidesSecond","cellsOfLane","push","apply","children","fillCurrentPlaybackStep","step","playbackSteps","forEach","playbackStep","remove","nextArrow","previousArrow","slideNumber","showSlide","n","slidesList","slides","length","currentSlide","bpmControl","getElementById","context","window","AudioContext","webkitAudioContext","buffer","urls","this","url","index","request","XMLHttpRequest","open","responseType","thisBuffer","onload","decodeAudioData","response","data","send","loadSound","createBuffer","newCells","steps","cells","cell","played","checked","disabled","initialCells","newLanes","sounds","lines","map","sound","clonedCell","Object","assign","obj","volume","panner","createLanes","cellsElements","lanes","lane","newSample","cloneNode","textContent","replace","slice","append","stepsList","fragment","createDocumentFragment","fragmentOne","newStep","fillStep","playbackWrapper","renderPlaybackLine","allCellsLists","createAllCellsArray","addEventListener","evt","indexOf","target","j","style","background","value","volumeControls","volumeControl","addVolumeControlsHandler","pannerControls","pannerControl","console","log","addPannerControlsHandler","addControlsHandlers","playSound","audioData","playTime","pans","source","createBufferSource","gainNode","createGain","gain","StereoPannerNode","pan","connect","destination","start","button","getElementsByClassName","allSounds","btn","getSound","onButtonPlaySound","nextStepTime","currentStep","scheduleSound","now","currentTime","playStepAtTime","nextStep","setTimeout","callback","tempo","key","isEscEvent","preventDefault"],"mappings":"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","file":"main.js","sourcesContent":["const barsControl = document.querySelector('#bars');\n\nconst initialCells = (steps) => {\n    let cells = [];\n   \n    for (let i = 0; i < steps; i++) {\n\n      const cell = {\n        played: false,\n        checked: false,\n        disabled: false\n      };\n\n      cells.push(cell);\n    }\n    \n    return cells;\n}\n\nconst createLanes = (sounds, cells) => {\n  const lines = []\n \n  sounds.map((sound) => {\n    const steps = [];\n\n    for (let i = 0; i < cells.length; i++) {\n      const clonedCell = Object.assign({}, cells[i]);\n      steps.push(clonedCell)\n    }\n    const obj = {sound: sound, cells: steps, volume: 1, panner: 0}\n    lines.push(obj)\n  })\n  return lines\n}\n\nconst setCellCheckedColor = (cell) => {\n  const {checked} = cell;\n  switch(checked) {\n    case true:\n      return '#000000';\n    break;\n    case false:\n      return '#ffffff';\n    break;\n    default:\n      return '#ffffff';\n  }\n}\n\n\n\n\nexport {initialCells, createLanes, setCellCheckedColor}","const PRIMARY_MOUSE_BUTTON = 0;\n\nconst isEscEvent = (evt) => {\n    return evt.key === ('Escape' || 'Esc');\n  };\n  \n  const isMouseLeftEvent = (evt) => {\n    return evt.button === PRIMARY_MOUSE_BUTTON;\n  }\n  \n  export {isEscEvent, isMouseLeftEvent}","const sequencer = document.querySelector('.sequencer__wrapper');\nconst sampleList = sequencer.querySelector('.sequencer__samples-list');\nconst sampleTemplate = document.querySelector('#matrix').content.querySelector('.sequencer__samples-item');\n\n// const createLine = (sound) => {\n//   const newSample = sampleTemplate.cloneNode(true);\n//   newSample.querySelector('.button').textContent = sound;\n//   sampleList.append(newSample);\n// }\n\nconst renderCell = () => {\n  const cellElement = document.createElement('button');\n  cellElement.classList.add('sequencer__cell');\n  cellElement.type = 'button';\n  \n  return cellElement;\n}\n\nconst setCellBackgroundColor = (cellElements) => {\n  cellElements.forEach((cellElement) => {\n\n    const cellIndex = [...cellElements].indexOf(cellElement, 0);\n     if (Math.floor(cellIndex / 4) % 2) {\n       cellElements[cellIndex].style.backgroundColor = '#62374e';\n     }\n     else {\n      cellElements[cellIndex].style.backgroundColor = '#62375e'\n     }\n  })\n}\n\nconst fillStep = (stepsList, steps) => {\n   \n   const fragment = document.createDocumentFragment();\n   const fragmentOne = document.createDocumentFragment();\n\n   steps.slice(0, 16).forEach((step) => {\n    \n    const newStep = renderCell();\n  \n    fragment.append(newStep);\n    });\n\n    steps.slice(16, 32).forEach((step) => {\n      const newStep = renderCell();\n      fragmentOne.append(newStep);\n      });\n  \n    stepsList[0].append(fragment);\n    stepsList[1].append(fragmentOne);\n};\n\nconst generateMatrixLane = (lane, cb) => {\n  const{sound, cells} = lane\n  const newSample = sampleTemplate.cloneNode(true);\n  newSample.querySelector('.button').textContent = sound.replace(/^.*[\\\\\\/]/, '').slice(0, -4);\n  sampleList.append(newSample);\n\n  const stepsList = newSample.querySelectorAll('.sequencer__step-list');\n\n  fillStep(stepsList, cells);\n};\n\n\nconst generateMatrix = (lanes) => {\n    lanes.forEach((lane) => {\n    generateMatrixLane(lane);\n  })\n};\n\n\n\nconst createCellsArray = (i, cb) => {\n  const slidesFirst = document.querySelectorAll('.slide-1');\n  const slidesSecond = document.querySelectorAll('.slide-2');\n  \n  const cellsOfLane = [];\n    cellsOfLane.push.apply(cellsOfLane, slidesFirst[i].children);\n    cellsOfLane.push.apply(cellsOfLane, slidesSecond[i].children);\n    \n    return cellsOfLane;\n    cb(cellsOfLane)\n}\n\nconst createAllCellsArray = () => {\n  const allCellsLists = []\n  for (let i = 0; i < 3; i++) {\n    const cellsOfLane = createCellsArray(i, setCellBackgroundColor);\n    allCellsLists.push(cellsOfLane);\n  }\n  return allCellsLists\n}\n\nconst addButtonCellHandler = (cellsElements, lanes, cb) => {\n  //const cellsButtonsArray = createAllCellsArray();\n  cellsElements.forEach((cellsOfLane) => {\n\n    cellsOfLane.forEach((cell) => cell.addEventListener('click', (evt) => {\n      const i = cellsElements.indexOf(cellsOfLane, 0);\n      const {cells} = lanes[i];\n      const cell = evt.target;\n      const j = cellsOfLane.indexOf(cell, 0);\n      cells[j].checked = cells[j].checked ? false : true; \n      cell.style.background = cb(cells[j]);\n    }))\n  })\n};\n\n// const renderPlayedCells = (cellsElements, lanes) => {\n\n//   lanes.forEach((lane) => {\n//     const {cells} = lane;\n//     cells.forEach((cell) => {\n//       const i = lanes.indexOf(lane);\n//       const cellsOfLane = cellsElements[i];\n//       const j = cells.indexOf(cell, 0);\n\n//       if (cell.played != false) {\n//         cellsOfLane[j].style.borderColor = setCellPlayedColor(cell);\n//       }\n      \n//     })\n//   })\n// }\n\n\n//создание новой дорожки\n\n  \n\n// const deleteLane = (lanes) => {\n  \n//   const before = lanes.slice(0, i);\n//   const after = lanes.slice(i, i + 1);\n//     const newArray = [...before, ...after];\n\n//     return {\n//       lanes: newArray,\n//     }\n//   })\n// };\n\n\n\n\n  \n  export {generateMatrix, createAllCellsArray, generateMatrixLane, addButtonCellHandler}","\n\nconst renderPlaybackLine = () => {\n\n    const playbackWrapper = document.querySelector('.sequencer__playback');\n    \n    const fragment = document.createDocumentFragment();\n\n    for(let i = 0; i < 32; i++) {\n\n   \n    const playbackStep = document.createElement('div');\n\n    playbackStep.classList.add('sequencer__playback-element');\n\n    fragment.append(playbackStep);\n    }\n    playbackWrapper.append(fragment);\n}\n\n\n\n\nconst fillCurrentPlaybackStep = (step) => {\n    const playbackSteps = document.querySelectorAll('.sequencer__playback-element');\n\n    [...playbackSteps].forEach((playbackStep) => {\n        const currentStep = playbackSteps[step - 1];\n        if (playbackStep == currentStep) {\n            playbackStep.classList.add('sequencer__playback-element--played')\n        }    \n        else {\n            playbackStep.classList.remove('sequencer__playback-element--played');\n        }\n\n    })\n}\n\nexport {renderPlaybackLine, fillCurrentPlaybackStep}","const nextArrow = document.querySelector('.slider__arrow--next');\nconst previousArrow = document.querySelector('.slider__arrow--prev');\nlet slideNumber = 1;\n\n const showSlide = (n) => {\n  const slidesLists = document.querySelectorAll('.slider-tracker');\n\n  slidesLists.forEach((slidesList) => {\n      const slides = slidesList.children\n\n      let i;\n      if (n > slides.length) {\n        slideNumber = 1;\n      }\n      if (n < 1) {\n        slideNumber = slides.length;\n      }\n      for (i = 0; i < slides.length; i++) {\n        slides[i].classList.remove(\"current-slide\");\n      }\n\n      slides[slideNumber-1].classList.add(\"current-slide\");\n    });\n    }\n\nconst onNextArrowClick = () => {\n  showSlide(slideNumber += 1);\n}\n\nconst onPreviousArrowClick = () => {\n  showSlide(slideNumber -= 1);\n}\nfunction currentSlide (n) {\n  showSlide(slideNumber = n);\n}\n\n\nconst addArrowsHandlers = () => {\n  nextArrow.addEventListener('click', onNextArrowClick);\n  previousArrow.addEventListener('click', onPreviousArrowClick);\n}\n\nexport {addArrowsHandlers, currentSlide}\n\n","const bpmControl = document.querySelector('#bpm');\n\n\nconst addBpmInputHandler = () => {\n    bpmControl.addEventListener('change', function() {\n     bpmControl.value = this.value;\n  });\n};\n\nconst setBpm = () => {\n  const bpm = bpmControl.value;\n  return bpm\n}\n\nconst setTempo = () => {\n    const bpm = bpmControl.value\n    const tic = (60 / bpm) / 4;\n    return tic; \n  }\n\nexport {addBpmInputHandler, setBpm, setTempo};\n","const playButton = document.getElementById('play');\nconst stopButton = document.getElementById('stop');\n\nconst playProject = (project) => {\n   const {isPlayed} = project;\n   isPlayed = true; \n   cb()\n\n}\n\nconst stopPlaybackProject = (project) => {\n    const {isPlayed} = false;\n    cb();\n}\n\nconst addButtonPlayHandler = (callback, cb) => {\n    playButton.addEventListener('click', (callback));\n    stopButton.removeEventListener('click', (cb))\n}\n\nconst addButtonStopHandler = (cb, callback) => {\n    stopButton.addEventListener('click', (cb));\n    playButton.removeEventListener('click', callback)\n\n}\n\nexport {addButtonPlayHandler, addButtonStopHandler}","import {generateMatrixLane} from './matrix.js';\n\nconst inputAdd = document.getElementById('.#sample');\n\nconst FILE_TYPES = ['mp3', 'wav'];\n\nconst uploadFile = (evt, cb) => {\n\n    const sound = evt.files;\n    const fileName = sound.url.toLowerCase();\n  \n    const matches = FILE_TYPES.some((it) => {\n      return fileName.endsWith(it);\n    });\n  \n    if (matches) {\n      const reader = new FileReader();\n      reader.addEventListener('load', cb)\n      reader.readAsDataURL(sound);\n    }\n  };\n  \nconst uploadSound = () => {\n  uploadFile(inputAdd, generateMatrixLane)\n}\n\nconst addInpytAddHandler = () => {\n  inputAdd.addEventListener('click', uploadSound)\n};\n\nexport {addInpytAddHandler}","import {isEscEvent} from './util.js';\nimport {initialCells, setCellCheckedColor, createLanes} from './cell.js';\nimport {addButtonCellHandler, generateMatrix, createAllCellsArray} from './matrix.js';\nimport {renderPlaybackLine, fillCurrentPlaybackStep} from './playback-cells.js'\nimport {addArrowsHandlers, currentSlide} from './slider.js';\nimport {addBpmInputHandler, setBpm, setTempo} from './bpm.js';\nimport {addButtonPlayHandler, addButtonStopHandler} from './player.js';\nimport {addInpytAddHandler} from './add.js';\nimport {addControlsHandlers} from './controls.js';\nimport {createProject} from './project.js';\n\n\nimport '../sass/style.sass';\n\n\nlet sounds = ['./samples/bdsh.wav',\n                './samples/boom.wav',\n                './samples/tsk.wav',\n              ];\n\nconst STEPS = 32;\nconst activeStep = 30;\n\nlet context = new (window.AudioContext || window.webkitAudioContext)();\n\nclass Buffer {\n\n  constructor(context, urls) {\n    this.context = context;\n    this.urls = urls;\n    this.buffer = [];\n  }\n\n  loadSound(url, index) {\n    let request = new XMLHttpRequest();\n    request.open('get', url, true);\n    request.responseType = 'arraybuffer';\n    let thisBuffer = this;\n    request.onload = function() {\n\n      thisBuffer.context.decodeAudioData(request.response, function(data) {\n          thisBuffer.buffer[index] = data;\n      });\n\n     };\n    request.send();\n  };\n\n  createBuffer() {\n    this.urls.forEach((url, index) => {\n      this.loadSound(url, index);\n\n    })\n  }\n\n getSound(index) {\n    return this.buffer[index];\n  }\n\n}\n\nconst buffer = new Buffer(context, sounds)\nbuffer.createBuffer();\n\n/////////////////////////\n\n\nconst newCells = initialCells(STEPS);\nconst newLanes = createLanes(buffer.urls, newCells); //дорожки\ngenerateMatrix(newLanes); // отрисовка дорожек\n\nrenderPlaybackLine(STEPS);// \n\n\nconst cellsButtons = createAllCellsArray();\n\naddButtonCellHandler(cellsButtons, newLanes, setCellCheckedColor)\n\naddArrowsHandlers(); //стрелки слайдера\n\naddBpmInputHandler(); //bpm\n\naddControlsHandlers(newLanes) //звук и панорама для дорожек\n\n\n\n\n\n\n// addFilterHandlers(\n//   debounce(renderOffersPin, DEBOUNCE_TIME));\n// })\n\n\n\n////Bufer////////////////////////////////////////////////////////\n\n\n\n\n\n\nconst playSound = (audioData, playTime, volume, pans) => {\n  const source = context.createBufferSource();\n  source.buffer = audioData;\n\n  const gainNode= context.createGain();\n  gainNode.gain.value = volume;\n\n  const pannerOptions = {pan: 0};\n  const panner = new StereoPannerNode(context, pannerOptions);\n  panner.pan.value = pans;\n\n  source.connect(gainNode).connect(panner).connect(context.destination);\n\n    source.start(playTime);\n}\n\n\n\n\n\n\n//////////////////////////////////////////////////\n\n\n\n\nconst onButtonPlaySound = () => {\n\nlet button = document.getElementsByClassName('button');\nvar allSounds = [];\n  allSounds.push.apply(allSounds, button);\n\n\n  allSounds.forEach((btn) => btn.addEventListener('click', (evt) => {\n      btn = evt.target;\n      const i = allSounds.indexOf(btn, 0);\n\n    playSound(buffer.getSound(i), 0, 1, 0)\n\n}))\n}\n\nonButtonPlaySound();\n\n\n\n//Sequencer\n\n\nlet startTime = 0;\nlet nextStepTime = 0.0;\nlet currentStep = 0;\n\n\nfunction scheduleSound() {\n  let now = context.currentTime;\n  now -= startTime;\n \n\n  while (nextStepTime < now + 0.2 ) {\n\n    let pt = nextStepTime + startTime;\n    playStepAtTime(newLanes, pt, fillCurrentPlaybackStep);\n    nextStep(newLanes, currentSlide);\n  }\n    const ti = setTimeout(scheduleSound, 0)\n    \n}\n\nfunction nextStep(lanes, callback) {\n  currentStep++;\n\n  lanes.forEach((lane) => {\n\n    const {cells} = lane;\n    cells.forEach((cell) => {\n      const currentCell = lane.cells[currentStep - 1];\n\n      if (cell = currentCell) {\n        cell.played = true;\n      }\n      else {\n        cell.played = false // не работает\n      };\n\n    });\n  });\n\n  currentStep > 16 ? callback(2)  : callback(1);\n\n\n  if (currentStep === activeStep) {\n    currentStep = 0;\n  }\n  let tempo = setTempo();\n  nextStepTime += tempo;\n}\n\nfunction playStepAtTime(lanes, playTime, cb) {\n\n    for(let i = 0; i < lanes.length; i++) {\n        const lane = lanes[i];\n        const volume = lane.volume;\n        const panner = lane.panner;\n        if (lane.cells[currentStep].checked != false) {\n          playSound(buffer.getSound(i), playTime, volume, panner);\n        }\n    }\n    cb(currentStep)\n    \n}\n\n// let bpm = setBpm();\n//     let project = createProject(newLanes, bpm);\n//     console.log(project)\n\n\nfunction play() {\n  \n  //nextStepTime = 0;\n  //startTime = context.currentTime + 0.005;\n  scheduleSound();\n\n}\n\n\n\n\n// function stop() {\n//   isPlaying = false;\n//   scheduleSound()\n//   console.log('stop')\n//   console.log(isPlaying)\n// }\n\n\n\n// addButtonPlayHandler(play, stop);\n// addButtonStopHandler(stop, play)\n\n\n\n\n\n// const loop = () => {\n//   let spb = (60/120);\n//   let frames = 0;\n\n//    let currentC = 0;\n//    let lastStep = -1;\n\n//   if(!isPlaying) {\n//     frames++;\n\n//     let seconds = 60/frames;\n//     let beatTime = spb/seconds%activeStep;\n\n\n//     lastStep = currentC;\n//     currentC = Math.floor(beatTime*4);\n\n\n//     if(lastStep != currentC) {\n\n\n//      //for (let i = 0; i < activeStep; i++) {\n//       if(lastStep === i) {\n//         now = 0;\n//         playSound(buffer.getSound(1))\n//         playSound(buffer.getSound(2))\n//       }\n//     }\n//   }\n\n// }\n//   requestAnimationFrame(loop)\n\n// }\n\n\n\ndocument.addEventListener('keydown', (evt) => {\n\n    if (isEscEvent(evt)) {\n      evt.preventDefault();\n    \n      play()\n    }\n});\n","\nconst addVolumeControlsHandler = (lanes) => {\n  const volumeControls = document.querySelectorAll('[data-action=\"volume\"]');\n\n  volumeControls.forEach((volumeControl) => {\n        \n        volumeControl.addEventListener('input', (evt) => {\n          volumeControl = evt.target;\n          const i = [...volumeControls].indexOf(volumeControl, 0);\n          const lane = lanes[i]; \n          lane.volume = evt.target.value;\n    })\n  })\n}\n\n\nconst addPannerControlsHandler = (lanes) => {\n  const pannerControls = document.querySelectorAll('[data-action=\"panner\"]');\n  \n    pannerControls.forEach((pannerControl) => {\n\n      pannerControl.addEventListener('input', (evt) => {\n        pannerControl = evt.target;\n        const i = [...pannerControls].indexOf(pannerControl, 0);\n        const lane = lanes[i]; \n        lane.panner = evt.target.value;\n        console.log(lanes);\n      });\n    });\n}\n\nconst addControlsHandlers = (lanes) => {\n  addVolumeControlsHandler(lanes);\n  addPannerControlsHandler(lanes)\n}\n\n\nexport {addControlsHandlers}; "],"sourceRoot":""}